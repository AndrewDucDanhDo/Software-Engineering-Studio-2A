{
	"swagger": "2.0",
	"info": {
		"title": "Quantum solver API",
		"version": "v1"
	},
	"tags": {
		"$ref": "common/tags.json"
	},
	"paths": {
		"/circuit/solve": {
			"post": {
				"tags": ["circuit"],
				"summary": "Solve a quantum circuit ✔",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Quantum circuit that needs to be solved.",
						"required": true,
						"schema": {
							"$ref": "definitions/circuit.json#circuit"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Result was successfully computed and returned.",
						"schema": {
							"$ref": "schemas/circuitResult.json#"
						},
						"examples": {
							"application/json": {
								"results": [
									{
										"value": "0.0000%",
										"impossible": true,
										"amplitude": "0.00000000+0.00000000i",
										"state": "00"
									},
									{
										"value": "0.0000%",
										"impossible": true,
										"amplitude": "0.00000000+0.00000000i",
										"state": "01"
									},
									{
										"value": "0.0000%",
										"impossible": true,
										"amplitude": "0.00000000+0.00000000i",
										"state": "10"
									},
									{
										"value": "100.0000%",
										"impossible": false,
										"amplitude": "1.00000000+0.00000000i",
										"state": "11"
									}
								]
							}
						}
					},
					"500": {
						"description": "Unknown server side error.",
						"schema": {
							"$ref": "schemas/apiResponse.json#"
						},
						"examples": {
							"application/json": {
								"msg": "An unknown error occurred while trying to solve the circuit.",
								"error": "RangeError: Invalid array length"
							}
						}
					}
				}
			}
		},
		"/user/create": {
			"post": {
				"tags": ["user"],
				"summary": "Create a new user in the quantum solver application. ⭕ (Needs response, needs body)",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "email",
						"in": "body",
						"required": true,
						"description": "The email address of the new user",
						"schema": {
							"type": "string",
							"example": "john.smith@exmaple.com"
						}
					},
					{
						"name": "password",
						"in": "body",
						"required": true,
						"description": "Password of the new user, Must be at least 6 digits.",
						"schema": {
							"type": "string",
							"example": "password1234"
						}
					},
					{
						"name": "firstName",
						"in": "body",
						"required": true,
						"description": "First name of new user",
						"schema": {
							"type": "string",
							"example": "John"
						}
					},
					{
						"name": "lastName",
						"in": "body",
						"required": true,
						"description": "Last name of new user",
						"schema": {
							"type": "string",
							"example": "Smith"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"uid": {
											"type": "string"
										},
										"email": {
											"type": "string"
										},
										"emailVerified": {
											"type": "boolean"
										},
										"displayName": {
											"type": "string"
										},
										"disabled": {
											"type": "boolean"
										},
										"metadata": {
											"type": "object",
											"properties": {
												"lastSignInTime": {
													"type": "string"
												},
												"creationTime": {
													"type": "string"
												}
											}
										},
										"tokensValidAfterTime": {
											"type": "string"
										},
										"providerData": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"uid": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"email": {
														"type": "string"
													},
													"providerId": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							}
						},
						"examples": {
							"application/json": {
								"uid": "NrkgUXXPrWUkeNvxXXhL7bRjXXl2",
								"email": "john.smith@exmaple.com",
								"emailVerified": false,
								"displayName": "John Smith",
								"disabled": false,
								"metadata": {
									"lastSignInTime": null,
									"creationTime": "Sat, 11 Apr 2020 10:57:33 GMT"
								},
								"tokensValidAfterTime": "Sat, 11 Apr 2020 10:57:33 GMT",
								"providerData": [
									{
										"uid": "john.smith@exmaple.com",
										"displayName": "John Smith",
										"email": "john.smith@exmaple.com",
										"providerId": "password1234"
									}
								]
							}
						}
					},
					"400": {
						"description": "User email already registered.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"properties": {
											"code": {
												"type": "string"
											},
											"msg": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"examples": {
							"application/json": {
								"code": "auth/email-already-exists",
								"msg": "The email address provided has currently got an account associated with it"
							}
						}
					},
					"500": {
						"description": "User email already registered.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"properties": {
											"code": {
												"type": "string"
											},
											"msg": {
												"type": "string"
											},
											"error": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"examples": {
							"application/json": {
								"code": "unknown",
								"msg": "An unknown error occurred while trying to create a new user.",
								"error": "Error: The password must be a string with at least 6 characters."
							}
						}
					}
				}
			}
		},
		"/user/{userId}": {
			"get": {
				"tags": ["user"],
				"summary": "TODO: Fetch user information. ⭕ (Needs response, needs body)",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					}
				],
				"responses": {
					"200": {
						"description": "User information successfully fetched.",
						"schema": {
							"$ref": "definitions/userId.json#"
						}
					},
					"400": {
						"description": "Bad request from client.",
						"schema": {
							"$ref": "definitions/apiResponse.json#"
						}
					},
					"500": {
						"description": "Unknown server side error.",
						"schema": {
							"$ref": "definitions/apiResponse.json#"
						}
					}
				}
			}
		},
		"/user/{userId}/circuit": {
			"get": {
				"tags": ["user", "circuit"],
				"summary": "TODO: Fetch all quantum circuits owned by user. ❔ (Needs response)",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					}
				],
				"responses": {
					"200": {
						"description": "Circuits where successfully returned.",
						"schema": {
							"type": "object",
							"properties": {
								"circuits": {
									"type": "array",
									"items": {
										"$ref": "schemas/circuitArray.json"
									}
								}
							}
						}
					},
					"500": {
						"description": "Unknown server side error.",
						"schema": {
							"$ref": "schemas/apiResponse.json#"
						},
						"examples": {
							"application/json": {
								"msg": "An unknown error occurred while trying to fetch users circuit.",
								"error": "RangeError: Invalid array length"
							}
						}
					}
				}
			}
		},
		"/user/{userId}/circuit/create": {
			"post": {
				"tags": ["user", "circuit"],
				"summary": "TODO: Create a new quantum circuit for user owned by a user. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					}
				]
			}
		},
		"/user/{userId}/circuit/{circuitId}": {
			"get": {
				"tags": ["user", "circuit"],
				"summary": "TODO: Fetch a single quantum circuits information owned by a user. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/circuit.json"
					}
				]
			}
		},
		"/user/{userId}/circuit/{circuitId}/update": {
			"post": {
				"tags": ["user", "circuit"],
				"summary": "TODO: Update a single quantum circuits information owned by a user. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/circuit.json"
					}
				]
			},
			"delete": {
				"tags": ["user", "circuit"],
				"summary": "TODO: Delete a single quantum circuit owned by a user.",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/circuit.json"
					}
				]
			}
		},
		"/user/{userId}/task": {
			"get": {
				"tags": ["user", "task"],
				"summary": "TODO: See the assigned quantum circuit tasks for a user. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					}
				]
			}
		},
		"/user/{userId}/task/{taskId}/submit": {
			"post": {
				"tags": ["user", "task", "submission"],
				"summary": "TODO: Submit a quantum circuit for a task for a user. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/taskId.json"
					}
				]
			}
		},
		"/user/{userId}/submission": {
			"get": {
				"tags": ["user", "submission"],
				"summary": "TODO: Fetch all users quantum circuit submissions. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					}
				]
			}
		},
		"/user/{userId}/submission/{submissionId}": {
			"get": {
				"tags": ["user", "submission"],
				"summary": "TODO: Fetch a single quantum circuit submissions information. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/submissionId.json"
					}
				]
			}
		},
		"/user/{userId}/submission/{submissionId}/update": {
			"post": {
				"tags": ["user", "submission"],
				"summary": "TODO: Update a single quantum circuit submissions information. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/submissionId.json"
					}
				]
			},
			"delete": {
				"tags": ["user", "submission"],
				"summary": "TODO: Delete single quantum circuit submission.",
				"parameters": [
					{
						"$ref": "common/parameters/userId.json"
					},
					{
						"$ref": "common/parameters/submissionId.json"
					}
				]
			}
		},
		"/task/create": {
			"post": {
				"tags": ["task"],
				"summary": "TODO: Add a new quantum circuit task. ⭕ (Needs response, needs body)"
			}
		},
		"/task/{taskId}": {
			"get": {
				"tags": ["task"],
				"summary": "TODO: Return the details of a quantum circuit task. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/taskId.json"
					}
				]
			}
		},
		"/task/{taskId}/update": {
			"post": {
				"tags": ["task"],
				"summary": "TODO: Update quantum circuit task details. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/taskId.json"
					}
				]
			},
			"delete": {
				"tags": ["task"],
				"summary": "TODO: Remove quantum circuit tasks.",
				"parameters": [
					{
						"$ref": "common/parameters/taskId.json"
					}
				]
			}
		},
		"/task/{taskId}/submission": {
			"get": {
				"tags": ["task", "submission"],
				"summary": "TODO: Fetch the submissions for a quantum circuit for a task. ⭕ (Needs response, needs body)",
				"parameters": [
					{
						"$ref": "common/parameters/taskId.json"
					}
				]
			}
		}
	}
}
